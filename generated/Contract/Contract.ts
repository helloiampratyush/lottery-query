// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numWords(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class lotteryAnnounceMent extends ethereum.Event {
  get params(): lotteryAnnounceMent__Params {
    return new lotteryAnnounceMent__Params(this);
  }
}

export class lotteryAnnounceMent__Params {
  _event: lotteryAnnounceMent;

  constructor(event: lotteryAnnounceMent) {
    this._event = event;
  }

  get counterNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get entranceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minplayers(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class lotteryForceEnded extends ethereum.Event {
  get params(): lotteryForceEnded__Params {
    return new lotteryForceEnded__Params(this);
  }
}

export class lotteryForceEnded__Params {
  _event: lotteryForceEnded;

  constructor(event: lotteryForceEnded) {
    this._event = event;
  }

  get lotteryCounter(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class winnerPicked extends ethereum.Event {
  get params(): winnerPicked__Params {
    return new winnerPicked__Params(this);
  }
}

export class winnerPicked__Params {
  _event: winnerPicked;

  constructor(event: winnerPicked) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lotteryCounter(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__loginManagementResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getStreak(): BigInt {
    return this.value0;
  }

  getS_lastTimeStamp(): BigInt {
    return this.value1;
  }

  getCheck_reset(): BigInt {
    return this.value2;
  }
}

export class Contract__lotteryMapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getS_entranceFee(): BigInt {
    return this.value0;
  }

  getS_latestTimeStamp(): BigInt {
    return this.value1;
  }

  getS_interval(): BigInt {
    return this.value2;
  }

  getS_lotteryState(): i32 {
    return this.value3;
  }

  getMinPlayers(): BigInt {
    return this.value4;
  }
}

export class Contract__s_requestsResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getFulfilled(): boolean {
    return this.value0;
  }

  getExists(): boolean {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  checkLotteryStatus(_lotteryCounter: BigInt): boolean {
    let result = super.call(
      "checkLotteryStatus",
      "checkLotteryStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryCounter)],
    );

    return result[0].toBoolean();
  }

  try_checkLotteryStatus(
    _lotteryCounter: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkLotteryStatus",
      "checkLotteryStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryCounter)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkThings(_lotteryCounter: BigInt): BigInt {
    let result = super.call("checkThings", "checkThings(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_lotteryCounter),
    ]);

    return result[0].toBigInt();
  }

  try_checkThings(_lotteryCounter: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkThings",
      "checkThings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryCounter)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeTokenToeth(): boolean {
    let result = super.call(
      "exchangeTokenToeth",
      "exchangeTokenToeth():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_exchangeTokenToeth(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "exchangeTokenToeth",
      "exchangeTokenToeth():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOverAllLotteryStatus(): boolean {
    let result = super.call(
      "getOverAllLotteryStatus",
      "getOverAllLotteryStatus():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_getOverAllLotteryStatus(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getOverAllLotteryStatus",
      "getOverAllLotteryStatus():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTokenBalance(): BigInt {
    let result = super.call(
      "getTokenBalance",
      "getTokenBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenBalance",
      "getTokenBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getYourStreak(): BigInt {
    let result = super.call("getYourStreak", "getYourStreak():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getYourStreak(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getYourStreak",
      "getYourStreak():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getlatestLoginTime(): BigInt {
    let result = super.call(
      "getlatestLoginTime",
      "getlatestLoginTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getlatestLoginTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getlatestLoginTime",
      "getlatestLoginTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRandomWords(param0: BigInt): BigInt {
    let result = super.call(
      "lastRandomWords",
      "lastRandomWords(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_lastRandomWords(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRandomWords",
      "lastRandomWords(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRequestId(): BigInt {
    let result = super.call("lastRequestId", "lastRequestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastRequestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRequestId",
      "lastRequestId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loginManagement(param0: Address): Contract__loginManagementResult {
    let result = super.call(
      "loginManagement",
      "loginManagement(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Contract__loginManagementResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_loginManagement(
    param0: Address,
  ): ethereum.CallResult<Contract__loginManagementResult> {
    let result = super.tryCall(
      "loginManagement",
      "loginManagement(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__loginManagementResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  lotteryCompletionOwnerTime(): BigInt {
    let result = super.call(
      "lotteryCompletionOwnerTime",
      "lotteryCompletionOwnerTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lotteryCompletionOwnerTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lotteryCompletionOwnerTime",
      "lotteryCompletionOwnerTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lotteryCounter(): BigInt {
    let result = super.call("lotteryCounter", "lotteryCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lotteryCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lotteryCounter",
      "lotteryCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lotteryMap(param0: BigInt): Contract__lotteryMapResult {
    let result = super.call(
      "lotteryMap",
      "lotteryMap(uint256):(uint256,uint256,uint256,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Contract__lotteryMapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt(),
    );
  }

  try_lotteryMap(
    param0: BigInt,
  ): ethereum.CallResult<Contract__lotteryMapResult> {
    let result = super.tryCall(
      "lotteryMap",
      "lotteryMap(uint256):(uint256,uint256,uint256,uint8,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__lotteryMapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt(),
      ),
    );
  }

  minplayerRequiredToJoin(_lotteryCounter: BigInt): BigInt {
    let result = super.call(
      "minplayerRequiredToJoin",
      "minplayerRequiredToJoin(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryCounter)],
    );

    return result[0].toBigInt();
  }

  try_minplayerRequiredToJoin(
    _lotteryCounter: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minplayerRequiredToJoin",
      "minplayerRequiredToJoin(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lotteryCounter)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relationId(param0: BigInt): BigInt {
    let result = super.call("relationId", "relationId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_relationId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("relationId", "relationId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestIds(param0: BigInt): BigInt {
    let result = super.call("requestIds", "requestIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_requestIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("requestIds", "requestIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_players(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "s_players",
      "s_players(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_s_players(param0: BigInt, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_players",
      "s_players(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  s_requests(param0: BigInt): Contract__s_requestsResult {
    let result = super.call("s_requests", "s_requests(uint256):(bool,bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return new Contract__s_requestsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
    );
  }

  try_s_requests(
    param0: BigInt,
  ): ethereum.CallResult<Contract__s_requestsResult> {
    let result = super.tryCall(
      "s_requests",
      "s_requests(uint256):(bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__s_requestsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
      ),
    );
  }

  s_subscriptionId(): BigInt {
    let result = super.call(
      "s_subscriptionId",
      "s_subscriptionId():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_s_subscriptionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_subscriptionId",
      "s_subscriptionId():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenBalance(param0: Address): BigInt {
    let result = super.call("tokenBalance", "tokenBalance(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_tokenBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalance",
      "tokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CheckThingsCall extends ethereum.Call {
  get inputs(): CheckThingsCall__Inputs {
    return new CheckThingsCall__Inputs(this);
  }

  get outputs(): CheckThingsCall__Outputs {
    return new CheckThingsCall__Outputs(this);
  }
}

export class CheckThingsCall__Inputs {
  _call: CheckThingsCall;

  constructor(call: CheckThingsCall) {
    this._call = call;
  }

  get _lotteryCounter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CheckThingsCall__Outputs {
  _call: CheckThingsCall;

  constructor(call: CheckThingsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EnterLotteryCall extends ethereum.Call {
  get inputs(): EnterLotteryCall__Inputs {
    return new EnterLotteryCall__Inputs(this);
  }

  get outputs(): EnterLotteryCall__Outputs {
    return new EnterLotteryCall__Outputs(this);
  }
}

export class EnterLotteryCall__Inputs {
  _call: EnterLotteryCall;

  constructor(call: EnterLotteryCall) {
    this._call = call;
  }

  get _lotteryCounter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterLotteryCall__Outputs {
  _call: EnterLotteryCall;

  constructor(call: EnterLotteryCall) {
    this._call = call;
  }
}

export class ExchangeTokenToethCall extends ethereum.Call {
  get inputs(): ExchangeTokenToethCall__Inputs {
    return new ExchangeTokenToethCall__Inputs(this);
  }

  get outputs(): ExchangeTokenToethCall__Outputs {
    return new ExchangeTokenToethCall__Outputs(this);
  }
}

export class ExchangeTokenToethCall__Inputs {
  _call: ExchangeTokenToethCall;

  constructor(call: ExchangeTokenToethCall) {
    this._call = call;
  }
}

export class ExchangeTokenToethCall__Outputs {
  _call: ExchangeTokenToethCall;

  constructor(call: ExchangeTokenToethCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ForceLotteryClosedCall extends ethereum.Call {
  get inputs(): ForceLotteryClosedCall__Inputs {
    return new ForceLotteryClosedCall__Inputs(this);
  }

  get outputs(): ForceLotteryClosedCall__Outputs {
    return new ForceLotteryClosedCall__Outputs(this);
  }
}

export class ForceLotteryClosedCall__Inputs {
  _call: ForceLotteryClosedCall;

  constructor(call: ForceLotteryClosedCall) {
    this._call = call;
  }

  get _lotteryCounter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForceLotteryClosedCall__Outputs {
  _call: ForceLotteryClosedCall;

  constructor(call: ForceLotteryClosedCall) {
    this._call = call;
  }
}

export class GetYourRefundCall extends ethereum.Call {
  get inputs(): GetYourRefundCall__Inputs {
    return new GetYourRefundCall__Inputs(this);
  }

  get outputs(): GetYourRefundCall__Outputs {
    return new GetYourRefundCall__Outputs(this);
  }
}

export class GetYourRefundCall__Inputs {
  _call: GetYourRefundCall;

  constructor(call: GetYourRefundCall) {
    this._call = call;
  }

  get _lotteryCounter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetYourRefundCall__Outputs {
  _call: GetYourRefundCall;

  constructor(call: GetYourRefundCall) {
    this._call = call;
  }
}

export class LoginManagement1Call extends ethereum.Call {
  get inputs(): LoginManagement1Call__Inputs {
    return new LoginManagement1Call__Inputs(this);
  }

  get outputs(): LoginManagement1Call__Outputs {
    return new LoginManagement1Call__Outputs(this);
  }
}

export class LoginManagement1Call__Inputs {
  _call: LoginManagement1Call;

  constructor(call: LoginManagement1Call) {
    this._call = call;
  }
}

export class LoginManagement1Call__Outputs {
  _call: LoginManagement1Call;

  constructor(call: LoginManagement1Call) {
    this._call = call;
  }
}

export class LotteryStartCall extends ethereum.Call {
  get inputs(): LotteryStartCall__Inputs {
    return new LotteryStartCall__Inputs(this);
  }

  get outputs(): LotteryStartCall__Outputs {
    return new LotteryStartCall__Outputs(this);
  }
}

export class LotteryStartCall__Inputs {
  _call: LotteryStartCall;

  constructor(call: LotteryStartCall) {
    this._call = call;
  }

  get _timeInterval(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _entranceFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minplayers(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LotteryStartCall__Outputs {
  _call: LotteryStartCall;

  constructor(call: LotteryStartCall) {
    this._call = call;
  }
}

export class NewBieBonusCall extends ethereum.Call {
  get inputs(): NewBieBonusCall__Inputs {
    return new NewBieBonusCall__Inputs(this);
  }

  get outputs(): NewBieBonusCall__Outputs {
    return new NewBieBonusCall__Outputs(this);
  }
}

export class NewBieBonusCall__Inputs {
  _call: NewBieBonusCall;

  constructor(call: NewBieBonusCall) {
    this._call = call;
  }
}

export class NewBieBonusCall__Outputs {
  _call: NewBieBonusCall;

  constructor(call: NewBieBonusCall) {
    this._call = call;
  }
}

export class OwnerCashoutCall extends ethereum.Call {
  get inputs(): OwnerCashoutCall__Inputs {
    return new OwnerCashoutCall__Inputs(this);
  }

  get outputs(): OwnerCashoutCall__Outputs {
    return new OwnerCashoutCall__Outputs(this);
  }
}

export class OwnerCashoutCall__Inputs {
  _call: OwnerCashoutCall;

  constructor(call: OwnerCashoutCall) {
    this._call = call;
  }
}

export class OwnerCashoutCall__Outputs {
  _call: OwnerCashoutCall;

  constructor(call: OwnerCashoutCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}
